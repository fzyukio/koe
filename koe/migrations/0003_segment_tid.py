# Generated by Django 2.0.4 on 2018-08-15 02:38
# Modified by yukio

from django.db import migrations, models
from django_bulk_update.helper import bulk_update

from progress.bar import Bar


def populate_tids(apps, schema_editor):
    """
    Populate new field 'tid' of Segment model.
    Two identical segments that come from the same songs (different databases) have different ID, but need same TID
    This function will assign the same value of id to tid when the segment is first found.
    Any identical segment found after will have the same tid as the first found
    """
    db_alias = schema_editor.connection.alias
    segment_model = apps.get_model("koe", "Segment")

    tid_dict = {}

    segments = segment_model.objects.using(db_alias).only(
        "id", "start_time_ms", "end_time_ms", "audio_file__name"
    )
    bar = Bar("Updating segments...", max=segments.count())

    for segment in segments:
        songname = segment.audio_file.name
        id = segment.id
        start = segment.start_time_ms
        end = segment.end_time_ms

        if songname not in tid_dict:
            song_dict = {}
            tid_dict[songname] = song_dict
        else:
            song_dict = tid_dict[songname]

        key = (start, end)
        if key not in song_dict:
            song_dict[key] = id
            segment.tid = id
        else:
            segment.tid = song_dict[key]
        bar.next()
    bar.finish()

    bulk_update(segments, update_fields=["tid"], batch_size=10000)


class Migration(migrations.Migration):
    dependencies = [
        ("koe", "0002_auto_20180615_1409"),
    ]

    operations = [
        migrations.AddField(
            model_name="segment",
            name="tid",
            field=models.IntegerField(default=None, null=True),
        ),
        migrations.RunPython(populate_tids, reverse_code=migrations.RunPython.noop),
        migrations.AlterField(
            model_name="segment",
            name="tid",
            field=models.IntegerField(),
        ),
    ]
